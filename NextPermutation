/* 1 3 5 4 2 ---> 1 4 2 3 5
    
    algorithm --> 
    step 1-> traverse from right to left & find the first index "idx1" s.t. arr[idx1]<arr[idx+1]
    step 2-> find the smallest element greater than "idx1" while traversing from right to left.
    step 3-> swap (idx1,idx2)
    step 4-> reverse(idx+1,n-1);
    
    Time Comp -> O(n) , Space Comp-> O(1 )
    */
     void nextPermutation(vector<int>& nums)
    {
       int n=nums.size(),id=-1;
        for(int i=n-1;i>0;i--)
        {
            if(nums[i] > nums[i-1])
            {
                id=i;
                break;
            }
        }
        if(id==-1)
            reverse(nums.begin(),nums.end());
        else
        {
            int pre=id;
            for(int i=id+1;i<n;i++)
            {
                if(nums[i]>nums[id-1] && nums[i]<=nums[pre])
                    pre=i;
            
            }
            swap(nums[id-1],nums[pre]);
            reverse(nums.begin()+id,nums.end());
            

        }
        
    }
};
